// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    //setting x or y to zero if required
   Mux16(a=x, b=false, sel=zx, out=xOrNull);
   Mux16(a=y, b=false, sel=zy, out=yOrNull);

    //negating x or y if required
   Not16(in=xOrNull, out=notx);
   Not16(in=yOrNull, out=noty);
   Mux16(a=xOrNull, b=notx, sel=nx, out=x2);
   Mux16(a=yOrNull, b=noty, sel=ny, out=y2);

    //x+y or x&y
   And16(a=x2, b=y2, out=xAndy);
   Add16(a=x2, b=y2, out=xPlusy);
   Mux16(a=xAndy, b=xPlusy, sel=f, out=added);

    //negating output if no = 1
   Not16(in=added, out=negated);
   Mux16(a=added, b=negated, sel=no, out=output);

    //giving output as out
   And16(a=true, b=output, out=out);

     //setting ng
   And16(a=output, b=true, out[15]=ng);

    //setting zr
   And16(a=true, b=output, out[0..7]=outlast8);
   And16(a=true, b=output, out[8..15]=outfirst8);
   Or8Way(in=outlast8, out=Or8Wayoutlast8);
   Or8Way(in=outfirst8, out=Or8Wayoutfirst8);
   Or(a=Or8Wayoutlast8, b=Or8Wayoutfirst8, out=outputIsNotZero);
   Not(in=outputIsNotZero, out=zr);


   
}

   
